/////////////////////
// Mixins

/// Mixin - Fluid Type.
/// PRECISE CONTROL OVER RESPONSIVE TYPOGRAPHY FOR SASS
/// Indrek Paas @indrekpaas
/// Inspired by Mike Riethmuller's Precise control over responsive typography
/// @link http://madebymike.com.au/writing/precise-control-responsive-typography/
/// @param $properties
/// @param $min-vw
/// @param $max-vw
/// @param $min-value
/// @param $max-value
@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  & {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-width: $min-vw) {
      @each $property in $properties {
        #{$property}:
          calc(
            #{$min-value} +
            #{strip-unit($max-value - $min-value)} *
            (100vw - #{$min-vw}) /
            #{strip-unit($max-vw - $min-vw)}
          );
      }
    }

    @media screen and (min-width: $max-vw) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }
}

/// Mixin - Font-Size.
/// Adds px value for fallback - then rem value
/// use example =   @include font-size(1.6); = 1.6rem / 16px

@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

/// Mixin - Clearfix.
/// Adds clearfix based on http://bourbon.io/docs/#clearfix
/// use example =   @include cleafix

@mixin clearfix {
  &::after {
    display: table;
    clear: both;
    content: "";
  }
}

/// Mixin - list-reset
/// Reset list item defaults when no margin, padding, list styles needed

@mixin list-reset {
  margin: 0;
  padding: 0;
  list-style: none;
}

/// Mixin - With Icon
/// Precede Text with SVG icon
@mixin with-icon {
  display: inline-block;
  margin-right: 0.1em;
  padding: 0.8em;
  content: "";
  background-size: cover;
}

/// Mixin - Outer container
/// Outer container mixin for large screens
@mixin outer-container {
  @include clearfix;

  max-width: 68.5em;
  margin: 0 auto;
}

/// Mixin - More Link
/// Used in a number of views
@mixin more-link {
  a {
    @include font-size(0.9);

    text-decoration: none;
    font-weight: 600;

    &::before {
      margin-right: 0.2em;
      content: "»";
      font-size: 1.2rem;
    }
  }
}

/// Mixin - Back Link
/// Used in a number of views
@mixin back-link {
  @include font-size(0.9);

  display: block;
  text-decoration: none;
  font-weight: 600;

  &::before {
    margin-right: 0.2em;
    content: "«";
    font-size: 1.2rem;
  }
}

// Function: String Replace
// =====================================================================

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string; /* stylelint-disable-line */
}

// Mixin: Font-Face
// https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
//
// Example usage:
// @include font-face("Font Name", "../fonts/file", 400, woff2 woff);
// =====================================================================

@mixin font-face(
  $name,
  $path,
  $weight: null,
  $style: null,
  $exts: eot woff2 woff ttf svg
) {
  $src: null;
  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );
  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(
      map-has-key($extmods, $ext),
      $ext + map-get($extmods, $ext),
      $ext
    );
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append(
      $src,
      url(quote($path + "." + $extmod)
    ) format(quote($format)),
    comma
  );
  }

  @font-face {
    font-family: quote($name);
    src: $src;
    font-weight: $weight;
    font-style: $style;
  }
}

// Mixin: pseudo
// =====================================================================
// Three items usually needed for pseudo-selectors
// Example usage:
// div::after {
//    @include pseudo;
//    width: 1em;
// }

@mixin pseudo($display: block, $pos: absolute, $content: "") {
  position: $pos;
  display: $display;
  content: $content;
}

// Mixin: full-width
// =====================================================================
// Stretch outside limited width container.
// See https://codepen.io/chriscoyier/details/xOjaYA/
// or for more details on approaches:
// https://css-tricks.com/full-width-containers-limited-width-parents/
//
// Example usage:
// div {
//  @include full-width;
//  @include full-width(50vw, 25%, -25vw);
// }
//

@mixin full-width($width: 100vw, $push: 50%, $pull: -50vw) {
  position: relative;
  right: $push;
  left: $push;
  width: $width;
  margin-right: $pull;
  margin-left: $pull;
}

/// Mixin - Flexbox Layout
/// Gives us a default flexbox layout with 1rem spacing between items.
/// This is handy if we only want flexbox on medium/large breakpoints.
///
/// Example usage:
/// Standard:
/// .view-content {
///   @include flex-default();
/// }
/// 1 column on small, 2 on medium, 3 on large and xlarge screens, with 2rem between items horizontally and 1rem between items vertically:
/// .view-content {
///   @include flex-default(1, 2, 3, 3, 1rem, 1rem);
/// }
@mixin flex-default($columns: 1, $md-columns: null, $lg-columns: null, $xlg-columns: null, $gutter: 1rem, $gutter-bottom: 2rem) {
  $gutterx2: $gutter * 2;

  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter;
  margin-left: -$gutter;

  > * {
    margin-bottom: $gutter-bottom;

    @if $gutter > 0 {
      width: calc((100% / #{$columns}) - #{$gutterx2});
      margin-right: $gutter;
      margin-left: $gutter;
    }

    @else {
      width: calc(100% / #{$columns});
    }
  }

  @if ($md-columns) {
    @include breakpoint($bp--medium) {
      > * {
        @if $gutter > 0 {
          width: calc((100% / #{$md-columns}) - #{$gutterx2});
        }

        @else {
          width: calc(100% / #{$md-columns});
        }
      }
    }
  }

  @if ($lg-columns) {
    @include breakpoint($bp--large) {
      > * {
        @if $gutter > 0 {
          width: calc((100% / #{$lg-columns}) - #{$gutterx2});
        }

        @else {
          width: calc(100% / #{$lg-columns});
        }
      }
    }
  }

  @if ($xlg-columns) {
    @include breakpoint($bp--xlarge) {
      > * {
        @if $gutter > 0 {
          width: calc((100% / #{$xlg-columns}) - #{$gutterx2});
        }

        @else {
          width: calc(100% / #{$xlg-columns});
        }
      }
    }
  }
}

.flex-default {
  @include flex-default;
}

@mixin animated_link($default-colour: var(--color-secondary), $hover-colour: var(--color-secondary)) {
  position: relative;
  top: 0;
  transition: $trans;
  text-decoration: none;
  color: $default-colour;

  &::after {
    position: absolute;
    left: 50%;
    width: 0;
    height: 2px;
    margin-top: 2rem;
    content: "";
    transition: $trans;
    transition-timing-function: cubic-bezier(1, -0.65, 0, 2.31);
    transform: translateX(-50%);
  }

  &:hover,
  &:focus {
    top: -2px;
    text-decoration: none;
    outline: none;

    &::after {
      width: calc(100% - 1.5rem);
      background-color: $hover-colour;
    }
  }
}
