{"version":3,"sources":["03-building-blocks/accordion/accordion.js"],"names":["Drupal","behaviors","accordion","attach","context","headings","querySelectorAll","Array","prototype","forEach","call","heading","index","parent","parentNode","content","nextElementSibling","innerHTML","textContent","btn","querySelector","setAttribute","classList","add","onclick","expanded","getAttribute","toggle"],"mappings":"aAAC,UAAyBA,CAAzB,CAAiC,CAChCA,CAAM,CAACC,SAAP,CAAiBC,SAAjB,CAA6B,CAC3BC,MAD2B,iBACpBC,CADoB,CACX,CACd;AACA,GAAMC,CAAAA,CAAQ,CAAGD,CAAO,CAACE,gBAAR,CAAyB,qBAAzB,CAAjB,CAEAC,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BL,CAA7B,CAAuC,SAACM,CAAD,CAAUC,CAAV,CAAoB,IACrDC,CAAAA,CAAM,CAAGF,CAAO,CAACG,UADoC,CAErDC,CAAO,CAAGJ,CAAO,CAACK,kBAFmC,CAMzDL,CAAO,CAACM,SAAR,kGAEMN,CAAO,CAACO,WAFd,udANyD,CAYzD,GAAIC,CAAAA,CAAG,CAAGR,CAAO,CAACS,aAAR,CAAsB,kCAAtB,CAAV,CAqBA;AAnBc,CAAV,GAAAR,CAdqD,EAgBvDO,CAAG,CAACE,YAAJ,CAAiB,eAAjB,IAhBuD,CAiBvDR,CAAM,CAACS,SAAP,CAAiBC,GAAjB,CAAqB,WAArB,CAjBuD,CAkBvDR,CAAO,CAACM,YAAR,CAAqB,aAArB,IAlBuD,EAqBvDN,CAAO,CAACM,YAAR,CAAqB,aAArB,IArBuD,CAwBzDF,CAAG,CAACK,OAAJ,CAAc,UAAM,CAClB,GAAIC,CAAAA,CAAQ,CAAyC,MAAtC,GAAAN,CAAG,CAACO,YAAJ,CAAiB,eAAjB,KAAf,CACA;AAEA;AADAP,CAAG,CAACE,YAAJ,CAAiB,eAAjB,CAAkC,CAACI,CAAnC,CAHkB,CAKlBZ,CAAM,CAACS,SAAP,CAAiBK,MAAjB,CAAwB,WAAxB,CALkB,CAMlBZ,CAAO,CAACM,YAAR,CAAqB,aAArB,CAAoCI,CAApC,CACD,CA/BwD,CAkCzDZ,CAAM,CAACS,SAAP,CAAiBC,GAAjB,CAAqB,cAArB,CACD,CAnCD,CAoCD,CAzC0B,CA2C9B,CA5CA,EA4CCvB,MA5CD,C","sourcesContent":["(function accordionScript(Drupal) {\n  Drupal.behaviors.accordion = {\n    attach(context) {\n      // Get all Accordion headings.\n      const headings = context.querySelectorAll(\".accordion__trigger\")\n\n      Array.prototype.forEach.call(headings, (heading, index) => {\n        let parent = heading.parentNode\n        let content = heading.nextElementSibling\n\n        // Give each <h2> a toggle button child\n        // with the SVG arrow icon\n        heading.innerHTML = `\n          <button aria-expanded=\"false\" class=\"accordion__trigger-button\">\n            ${heading.textContent}\n            <svg class=\"accordion__trigger-icon\" aria-hidden=\"true\" focusable=\"false\" width=\"48\" height=\"24\" viewBox=\"0 0 48 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M45.14 1.019c.655-.583 1.719-.583 2.373 0 .65.586.65 1.539 0 2.125L25.186 23.145c-.654.583-1.718.583-2.372 0L.487 3.144a1.402 1.402 0 010-2.125c.654-.583 1.718-.583 2.373 0l21.153 18.954L45.14 1.02z\" fill=\"#4A4A4A\" fill-rule=\"evenodd\"/></svg>\n          </button>\n        `\n        let btn = heading.querySelector('button.accordion__trigger-button')\n\n        if (index === 0) {\n          // Set first accordion to expanded\n          btn.setAttribute('aria-expanded', true)\n          parent.classList.add('is-active')\n          content.setAttribute('aria-hidden', false)\n        } else {\n          // Hide other accordion item's content from screen-readers\n          content.setAttribute('aria-hidden', true)\n        }\n\n        btn.onclick = () => {\n          let expanded = btn.getAttribute('aria-expanded') === 'true' || false\n          // Switch the state\n          btn.setAttribute('aria-expanded', !expanded)\n          // Switch the content's visibility\n          parent.classList.toggle('is-active')\n          content.setAttribute('aria-hidden', expanded)\n        }\n\n        // Hide Accordion content via css only if js\n        parent.classList.add('js-accordion')\n      });\n    }\n  };\n}(Drupal));\n"],"file":"accordion.js"}