{"version":3,"sources":["02-site-components/menus/menu-items.js"],"names":["Drupal","behaviors","menuItems","attach","context","init","menuRoot","classList","contains","toggles","querySelectorAll","forEach","el","setAttribute","dataset","menuOpenLabel","removeAttribute","addEventListener","handleButtonClick","handleEscKeydown","add","ev","preventDefault","expanded","target","getAttribute","closest","closeMenu","openMenu","toggle","allToggles","parentToggles","parentControls","indexOf","menuCloseLabel","toggleParent","parentNode","closeToggles","element","parentElement","parentElements","slice","pop","push","childElements","children","i","length","window","event","isEscape","key","substring","keyCode","menuRoots","m"],"mappings":"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","sourcesContent":["/**\n * Provides custom menu expand/collaps behaviour for menu-items.\n *\n * To-do:\n *\n *   - consider how to animate this in javascript (for better overall quality\n *     of animation). Probably this would need to be a configurable option.\n */\n(function menuItemsScript(Drupal) {\n  Drupal.behaviors.menuItems = {\n    attach(context) {\n      const submenusSelector = '[data-submenus]';\n      const menuRoots = context.querySelectorAll(submenusSelector);\n      const menuProcessedClass = 'js-navigation';\n      const toggleSelector = '.sub-menu-item-toggle';\n\n      menuRoots.forEach(m => {\n        init(m);\n      });\n\n      /**\n       * Handles menu initialization.\n       */\n      function init(menuRoot) {\n        // If this menu has already been processed, we can stop here.\n        if (menuRoot.classList.contains(menuProcessedClass)) {\n          return;\n        }\n\n        // Gather some info.\n        const toggles = menuRoot.querySelectorAll(toggleSelector);\n\n        // Close all submenus, add event listeners to buttons, and make\n        // them visible.\n        toggles.forEach(el => {\n          // In this context, it's more efficient to do this directly than to\n          // call our closeMenu() function.\n          el.setAttribute('aria-expanded', false);\n          el.setAttribute('aria-label', menuRoot.dataset.menuOpenLabel);\n          el.removeAttribute('hidden');\n          el.addEventListener('click', handleButtonClick);\n        });\n\n        // Add an event listener for `Esc` key menu-closing.\n        menuRoot.addEventListener('keydown', handleEscKeydown);\n\n        // Tag the menu as processed.\n        menuRoot.classList.add(menuProcessedClass);\n      }\n\n      /**\n       * Handles submenu item toggle button clicks.\n       */\n      function handleButtonClick(ev) {\n        // We'll handle the whole behaviour in script.\n        ev.preventDefault();\n\n        const expanded = ev.target.getAttribute('aria-expanded') === 'true';\n        const menuRoot = ev.target.closest(submenusSelector);\n\n        // When the menu corresponding to a button is already expanded.\n        if (expanded) {\n          closeMenu(ev.target, menuRoot);\n        }\n        // When the corresponding menu is not already expanded.\n        else {\n          openMenu(ev.target, menuRoot);\n        }\n      }\n\n      /**\n       * Opens the menu corresponding to a button element.\n       *\n       * To OPEN a menu, we need to:\n       *\n       * - Open the menu associated with the button,\n       * - Close all other menus EXCEPT the parent menus,\n       * - Set arial-label attributes appropriately.\n       */\n      function openMenu(toggle, menuRoot) {\n        const allToggles = menuRoot.querySelectorAll(toggleSelector);\n        const parentToggles = parentControls(toggle, menuRoot);\n\n        // Close all menus that aren't parents of the clicked button.\n        allToggles.forEach(el => {\n          if (parentToggles.indexOf(el) === -1) {\n            closeMenu(el, menuRoot);\n          }\n        });\n\n        // Open the menu corresponding to the click.\n        toggle.setAttribute('aria-expanded', true);\n        toggle.setAttribute('aria-label', menuRoot.dataset.menuCloseLabel);\n      }\n\n      /**\n       * Toggles closed already-open submenus.\n       */\n      function closeMenu(toggle, menuRoot) {\n        // Close the menu associated with this control only, unless\n        // `button` is set to \"all\" in which case, we indiscriminately\n        // close everything.\n        const toggleParent = (toggle === 'all') ? menuRoot.closest(submenusSelector) : toggle.parentNode;\n        const closeToggles = toggleParent.querySelectorAll(toggleSelector);\n\n        closeToggles.forEach(el => {\n          el.setAttribute('aria-expanded', false);\n          el.setAttribute('aria-label', menuRoot.dataset.menuOpenLabel);\n        });\n      }\n\n      /**\n       * Returns an array of buttons belonging to parents of the current button.\n       */\n      function parentControls(element, menuRoot) {\n        // Start with some initial variables.\n        let parentElement = '';\n        let parentElements = [element];\n        let parentControls = [];\n\n        // Keep getting parent elements until we reach the root of this menu.\n        while (parentElement !== menuRoot) {\n          // Get the parent node and add it to our array.\n          parentElement = parentElements.slice(-1).pop().parentNode;\n          parentElements.push(parentElement);\n\n          // If this particular parent element is one of our list-items,\n          // search it for button elements.\n          if (parentElement.classList.contains('menu-item')) {\n            // Loop over its children and add any buttons found to the return\n            // array.\n            const childElements = parentElement.children;\n\n            for (let i = 0; i < childElements.length; i++) {\n              if (childElements[i].classList.contains('sub-menu-item-toggle') && childElements[i] !== element) {\n                parentControls.push(childElements[i]);\n\n                // There can only ever be one button as a direct child\n                // of a list item, so if we've found one, exit the loop.\n                break;\n              }\n            }\n          }\n        }\n\n        return parentControls;\n      }\n\n      /**\n       * Allows open menus to be closed with the escape key.\n       *\n       * Note that this requires the menu element or some child element to have\n       * focus to work. For example a menu toggled open with the mouse can't\n       * be closed by the escape key until it gains focus by a click or a tab.\n       */\n      function handleEscKeydown(ev) {\n        ev = ev || window.event;\n\n        const isEscape = (('key' in ev) && (ev.key.substring(0, 3) === 'Esc')) || (ev.keyCode == 27);\n\n        if (isEscape) {\n          closeMenu('all', ev.target);\n        }\n      }\n    }\n  };\n})(Drupal);\n"],"file":"menu-items.js"}